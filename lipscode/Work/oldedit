(df edit (exp)
  (let ((eexp (getrep (eval exp)))
        cexp
        clist
        (editing t)
        com
        tmp
        (plev (printlevel 3)))
   (setq cexp eexp)
   (while editing
    (prin1 "*")
    (setq com (read))
    (cond
     ((eq com 0)
      (cond
       (clist (setq cexp (car clist))
              (setq clist (cdr clist)))))
     ((numberp com)
      (setq tmp (car cexp))
      (setq clist (cons cexp clist))
      (while (greaterp com 1)
       (setq cexp (cdr cexp))
       (setq tmp (car cexp))
       (setq com (sub1 com)))
      (setq cexp tmp))
     ((atom com)
      (edcom))
     ((listp com)
      (setq tmp (car com))
      (cond
       ((and (numberp tmp)
             (greaterp tmp 0))
        (cond ((null (cdr com)) (setq tmp (sub1 tmp))))
        (setq clist (cons cexp clist))
        (while (greaterp tmp 1)
	 (setq cexp (cdr cexp))
	 (setq tmp (sub1 tmp)))
	(and cexp (cond ((cdr com) (rplaca cexp (cadr com)))
                        (t (rplaca cexp (cadr cexp))
                           (rplacd cexp (cddr cexp)))))
	(setq cexp (car clist))
	(setq clist (cdr clist)))
       (t (eval com)))))))
  (list exp))

(de edcom ()
  (cond
   ((eq com '^)
    (setq clist)
    (setq cexp eexp))
   ((eq com 'p)
    (print cexp))
   ((eq com 'pp)
    (pprint cexp))
   ((eq com '?)
    (printlevel plev)
    (print cexp)
    (printlevel 3))
   ((eq com 'q)
    (setq editing)
    (printlevel plev)
    nil)
   ((eq com 'ok)
    (setq editing)
    (printlevel plev)
    (define exp (eval eexp))
    nil)))
