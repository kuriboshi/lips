/*
 * Lips, lisp shell.
 * Copyright 1989, 2020 Krister Joas
 *
 */

#pragma once

namespace lisp
{
inline constexpr auto PN_RECLAIM = "reclaim";       // initiate garbage collection
inline constexpr auto PN_CONS = "cons";             // make a new cons cell
inline constexpr auto PN_PLUS = "+";                // add
inline constexpr auto PN_DIFFERENCE = "-";          // subtract
inline constexpr auto PN_TIMES = "*";               // multiply
inline constexpr auto PN_DIVIDE = "/";              // divide
inline constexpr auto PN_IPLUS = "i+";              // integer add
inline constexpr auto PN_IDIFFERENCE = "i-";        // integer subtract
inline constexpr auto PN_ITIMES = "i*";             // integer multiply
inline constexpr auto PN_IQUOTIENT = "i/";          // integer divide
inline constexpr auto PN_IREMAINDER = "i%";         // integer mod
inline constexpr auto PN_IMINUS = "iminus";         // integer change sign
inline constexpr auto PN_MINUS = "minus";           // change sign generic
inline constexpr auto PN_ADD1 = "add1";             // add one
inline constexpr auto PN_SUB1 = "sub1";             // subtract one
inline constexpr auto PN_ABS = "abs";               // absolute value
inline constexpr auto PN_FPLUS = "f+";              // float add
inline constexpr auto PN_FDIFFERENCE = "f-";        // float subtract
inline constexpr auto PN_FTIMES = "f*";             // float multiply
inline constexpr auto PN_FDIVIDE = "f/";            // float divide
inline constexpr auto PN_ITOF = "itof";             // integer to float
inline constexpr auto PN_GREATERP = "greaterp";     // t if greater than
inline constexpr auto PN_GEQ = "geq";               // t if greater or eq
inline constexpr auto PN_LESSP = "lessp";           // less than
inline constexpr auto PN_LEQ = "leq";               // less or eq
inline constexpr auto PN_ZEROP = "zerop";           // t if eq to 0
inline constexpr auto PN_EQP = "eqp";               // number eq
inline constexpr auto PN_NEQP = "neqp";             // not eqp
inline constexpr auto PN_MINUSP = "minusp";         // t if negative
inline constexpr auto PN_FREECOUNT = "freecount";   // number of free cells
inline constexpr auto PN_EVALTRACE = "evaltrace";   //
inline constexpr auto PN_OBARRAY = "obarray";       // return list of all atoms
inline constexpr auto PN_E = "e";                   // noeval version of eval
inline constexpr auto PN_EVAL = "eval";             // evaluate exp
inline constexpr auto PN_APPLY = "apply";           // apply function on args
inline constexpr auto PN_APPLYSTAR = "apply*";      // apply nospread
inline constexpr auto PN_EXPAND = "expand";         // expand wildcards
inline constexpr auto PN_TO = "redir-to";           // redirect to file
inline constexpr auto PN_FROM = "redir-from";       // redirect from file
inline constexpr auto PN_TOTO = "append-to";        // redirect appending to file
inline constexpr auto PN_PIPECMD = "pipe-cmd";      // pipe commands
inline constexpr auto PN_BACK = "back";             // run command in background
inline constexpr auto PN_STOP = "stop-lips";        // stop lips, return to superior
inline constexpr auto PN_REHASH = "rehash";         // recalculate hash table
inline constexpr auto PN_JOBS = "jobs";             // list jobs
inline constexpr auto PN_FG = "fg";                 // run job in foreground
inline constexpr auto PN_BG = "bg";                 // run job in background
inline constexpr auto PN_SETENV = "setenv";         // set environment variable
inline constexpr auto PN_GETENV = "getenv";         // get value of variable
inline constexpr auto PN_EXEC = "exec";             // overlay lips with command
inline constexpr auto PN_LOAD = "load";             // load file
inline constexpr auto PN_PRIN1 = "prin1";           // print without escapes
inline constexpr auto PN_PRIN2 = "prin2";           // print without new-line
inline constexpr auto PN_PRINT = "print";           // print
inline constexpr auto PN_PLEVEL = "printlevel";     // how deep to print
inline constexpr auto PN_RATOM = "ratom";           // read atom
inline constexpr auto PN_READ = "read";             // read expression
inline constexpr auto PN_READC = "readc";           // read characte
inline constexpr auto PN_READLINE = "readline";     // read a line
inline constexpr auto PN_SPACES = "spaces";         // print some spaces
inline constexpr auto PN_TERPRI = "terpri";         // print new-line
inline constexpr auto PN_CPPRINT = "cpprint";       // find and prettyprint c function
inline constexpr auto PN_AND = "and";               // and
inline constexpr auto PN_OR = "or";                 // or
inline constexpr auto PN_NOT = "not";               // not
inline constexpr auto PN_IF = "if";                 // if a then b else c
inline constexpr auto PN_SET = "set";               // set variable
inline constexpr auto PN_SETQ = "setq";             // set quoted variable
inline constexpr auto PN_SETQQ = "setqq";           // noeval set
inline constexpr auto PN_COND = "cond";             // cond
inline constexpr auto PN_WHILE = "while";           // while t
inline constexpr auto PN_PROGN = "progn";           // return last expression
inline constexpr auto PN_PROG1 = "prog1";           // return first expression
inline constexpr auto PN_PROG2 = "prog2";           // return second expression
inline constexpr auto PN_TOPOFSTACK = "topofstack"; // return top of value stack
inline constexpr auto PN_ENVGET = "envget";         // examine environment
inline constexpr auto PN_BAKTRACE = "baktrace";     // control stack backtrace
inline constexpr auto PN_MAP = "map";               // map
inline constexpr auto PN_MAPC = "mapc";             // map on car
inline constexpr auto PN_MAPLIST = "maplist";       // map and build result
inline constexpr auto PN_MAPCAR = "mapcar";         // mapc and build result
inline constexpr auto PN_LISTP = "listp";           // t if cons
inline constexpr auto PN_NLISTP = "nlistp";         // not listp
inline constexpr auto PN_NEQ = "neq";               // not eq
inline constexpr auto PN_NUMBERP = "numberp";       // integer of float
inline constexpr auto PN_MEMB = "memb";             // t if a in l
inline constexpr auto PN_EQUAL = "equal";           // equal
inline constexpr auto PN_BOUNDP = "boundp";         // t if var bound
inline constexpr auto PN_LITATOM = "litatom";       // t if literal atom
inline constexpr auto PN_TYPEOF = "typeof";         // return type as an atom
inline constexpr auto PN_ATOM = "atom";             // t if atom
inline constexpr auto PN_ATTACH = "attach";         // attach object at front of list
inline constexpr auto PN_APPEND = "append";         // append lists
inline constexpr auto PN_CAR = "car";               // car
inline constexpr auto PN_CDR = "cdr";               // cdr
inline constexpr auto PN_CADR = "cadr";             // cadr
inline constexpr auto PN_CDAR = "cdar";             // cdar
inline constexpr auto PN_CAAR = "caar";             // caar
inline constexpr auto PN_CDDR = "cddr";             // cddr
inline constexpr auto PN_CDDDR = "cdddr";           // cdddr
inline constexpr auto PN_CADDR = "caddr";           // caddr
inline constexpr auto PN_CDADR = "cdadr";           // cdadr
inline constexpr auto PN_CAADR = "caadr";           // caadr
inline constexpr auto PN_CDDAR = "cddar";           // cddar
inline constexpr auto PN_CADAR = "cadar";           // cadar
inline constexpr auto PN_CDAAR = "cdaar";           // cdaar
inline constexpr auto PN_CAAAR = "caaar";           // caaar
inline constexpr auto PN_CLOSURE = "closure";       // create static environment
inline constexpr auto PN_EQ = "eq";                 // pointer equal
inline constexpr auto PN_ERROR = "error";           // error
inline constexpr auto PN_LAMBDA = "lambda";         // create lambda object
inline constexpr auto PN_LENGTH = "length";         // length of list
inline constexpr auto PN_LIST = "list";             // make list of args
inline constexpr auto PN_NCONC = "nconc";           // destructive append
inline constexpr auto PN_NLAMBDA = "nlambda";       // make nlambda object
inline constexpr auto PN_NTH = "nth";               // nth car in list
inline constexpr auto PN_NULL = "null";             // t if nil
inline constexpr auto PN_QUOTE = "quote";           // don't eval arg
inline constexpr auto PN_RPLACA = "rplaca";         // replace car
inline constexpr auto PN_RPLACD = "rplacd";         // replace cdr
inline constexpr auto PN_TCONC = "tconc";           // add to end of list
inline constexpr auto PN_NTHD = "nthd";             // return nth cdr of list
inline constexpr auto PN_SETPLIST = "setplist";     // set property list
inline constexpr auto PN_GETPLIST = "getplist";     // get property list
inline constexpr auto PN_PUTPROP = "putprop";       // put property on atom
inline constexpr auto PN_GETPROP = "getprop";       // get property value
inline constexpr auto PN_REMPROP = "remprop";       // remove prop
inline constexpr auto PN_STRINGP = "stringp";       // t if string
inline constexpr auto PN_STREQ = "streq";           // string equal
inline constexpr auto PN_CONCAT = "concat";         // concatenate strings
inline constexpr auto PN_STRLEN = "strlen";         // length of string
inline constexpr auto PN_SUBSTR = "substr";         // get sub string
inline constexpr auto PN_SYMSTR = "symstr";         // make symbol a string
inline constexpr auto PN_STRCMP = "strcmp";         // compare strings
inline constexpr auto PN_PRINTHIST = "??";          // print history
inline constexpr auto PN_UXACCESS = "access";       // check file access
inline constexpr auto PN_UXALARM = "alarm";         // set alarm clock
inline constexpr auto PN_UXCHDIR = "chdir";         // change directory
inline constexpr auto PN_UXCHMOD = "chmode";        // change mode of file
inline constexpr auto PN_UXCLOSE = "close";         // close file
inline constexpr auto PN_UXCREAT = "creat";         // create file
inline constexpr auto PN_UXDUP = "dup";             // duplicate fileno
inline constexpr auto PN_UXERRNO = "errno";         // return latest error
inline constexpr auto PN_EXIT = "exit";             // exit lips
inline constexpr auto PN_UXGETUID = "getuid";       // get user id
inline constexpr auto PN_UXGETEUID = "geteuid";     // get effective user id
inline constexpr auto PN_UXGETGID = "getgid";       // set group id
inline constexpr auto PN_UXGETEGID = "getegid";     // get effective group id
inline constexpr auto PN_UXGETPID = "getpid";       // get process id
inline constexpr auto PN_UXKILL = "killproc";       // kill process
inline constexpr auto PN_UXLINK = "link";           // link file
inline constexpr auto PN_UXNICE = "setnice";        // set nice
inline constexpr auto PN_UXOPEN = "open";           // open file
inline constexpr auto PN_UXSETUID = "setuid";       // set user id
inline constexpr auto PN_UXSETGID = "setgid";       // set group id
inline constexpr auto PN_SIGNAL = "signal";         // install signal handler
inline constexpr auto PN_UXUNLINK = "unlink";       // unlink file
inline constexpr auto PN_DEFINE = "define";         // define function
inline constexpr auto PN_GETREP = "getrep";         // get function representation
inline constexpr auto PN_DE = "de";                 // defile lambda function
inline constexpr auto PN_DF = "df";                 // define nlambda function
inline constexpr auto PN_CD = "cd";                 // change directory

} // namespace lisp
