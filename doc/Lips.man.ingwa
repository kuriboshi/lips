'\" t
.TH LIPS 1 "17 March 1989" "Version 0.1(107)"
.SH NAME
lips \- lisp shell
.SH SYNOPSIS
.B lips
[
.B -cfiv
]
[
.I argument
]
.SH OPTIONS
.IP -c
argument is a 
.I lips
expression that is read
and executed.
.IP -i
make 
.I lips
interactive even if stdin is not a terminal.
.IP -f
don't read commands from initfiles.
.IP -v
print version on startup.
.SH DESCRIPTION
.br
.I lips
is a lisp based shell.
In addition of being more or less complete implementation of lisp,
.I lips
offers functionality to make it work as a command shell.
It includes functions for
tool combination through pipes and input, output redirection.
.I lips
makes use of read macros to make the input
syntax resemble the standard shells.
.PP
This document will give a brief overview over
.IR lips ,
and should be adequate for getting started.
See the
.SM FUNCTIONS
for a complete list of functions provided.
.PP
When
.I lips
is started it reads and evaluates expressions
in a central initialization file.
This file is called lipsrc,
and is located in some public directory.
After reading this file
.I lips
looks for the file
.I .lipsrc
in the users home directory.
If it is found,
the expressions in it are read and evaluated.
Comments are allowed in
.I lips
files.
Comments start with a `#' character and end with a newline.
.PP
When the startup process is done,
.I lips
prompts with the current history number followed by an underscore.
All commands are saved on the history list,
and may be recalled at any time.
However, a maximum number of events saved on the history
list is limited to the value of
.IR histmax .
This variable may be set by the user to any value.
.SS Lips Input Syntax
The types of objects recognized by the lisp reader
are integers, floats, literal atoms, lists and strings.
All objects except lists and dotted pairs
are called atoms.
.PP
Strings start and end with a double quote, `"'.
To enter a double quote in a string preceed it by a backslash, `\\'.
For instance, "Foo bar" is a string and so is "I like \\"lips\\"" which
contains two double quotes.
Newlines may be embedded inside strings without escaping them.
.PP
Lists start with a left parenthesis followed by zero or more
lisp expressions separated by separators (see below).
The list ends with a matching right parenthesis.
Separators breaks the atoms, and by default these are
blanks, tabs and newlines.
There is also a class of characters called break characters.
These characters breaks literal atoms and there is no
need to add separators around them.
Break characters are also literal atoms.
The default break characters are: `(', `)', `&', `<', `>' and `|'.
Thus,
.PP
.RS
.na
.nf
foo
(foo)
(foo fie fum)
(foo (fie(x y (z)))(fum))
.fi
.ad
.RE
.PP
are all valid lisp expressions.
The nesting of parenthesis may have arbitrary depth.
.PP
The elements of lists are stored in the car part of the cons
cells, and are then linked together by the cdr's.
The last cdr is always 
.BR nil .
It's possible to enter so called dotted pairs in
.IR lips .
A dotted pair is a cons cell with two expressions with no
restrictions in the car and cdr of the cell.
Dotted pairs are entered starting with a left parenthesis,
.I lips
expression, followed by a dot, `.', another expression and
terminated with a right parenthesis. 
(a . b) is an example of a dotted pair. Note that
the blanks around the dot are necessary, the dot is not a break character.
The dot is recognized in this special way only if it occurs
as the second element from the end of a list.
In other cases it is treated as an ordinary atom.
The list (. . . .) is a list with three elements
ending in a dotted pair.
.PP
A list is just a special case of dotted pairs.
(a . (b . nil)) is equivalent to (a b).
The second format is just a convenience since
lists are so common.
.PP
Integers consist of a sequence of digits.
No check for overflow is made.
Floats are a bit complicated, but in most cases atoms that
looks like a float is a float.
A float is a sequence of digits that have either a decimal point
or a exponentiation character, `e', inside.
At most one decimal point is allowed.
If the exponentiation character is given it must be followed by
at least one digit.
If these rules are not followed the atom will be
interpreted as a literal atom.
Examples:
.PP
.RS
.na
.nf
.TS
tab(/);
l l.
foo/literal atom
"fie"/string
123/integer
12a/literal atom
1.0/float
1e5/float
1e/literal atom
.e4/literal atom
1.4./literal atom
.TE
.fi
.ad
.RE
.PP
All expressions typed at the top level prompt are
treated as lists.
This means that 
.I lips
supplies an extra pair of
parenthesis around all expressions.
If the first expression of a line is an atom,
and not a list,
input terminates with either a return
(providing that parenthesis in subexpressions match),
or an extra right parenthesis.
In the first case, a matchin pair of
parenthesis are added surrounding the line,
in the second case an extra left parenthesis is added
as the first character.
Again, if a left parenthesis is missing a matching 
paren is inserted.
.PP
Typing the outermost parenthesis explicitly
will make 
.I lips
print out the return value of
the expression.
This is the way normal lisp systems behave,
but when used only as a command shell
the return value is most often uninteresting.
The return value is also stored in the variable
.BR value .
.PP
.SS The Evaluation Process
On the top level
.I lips
reads expressions from standard in and
evaluates the expressions.
Commands entered on the top level are always treated as
functions, even if no parameters are given or
if the expression is a single atom.
In order to print the value of a variable the function
print must be used.
.PP
If the expression to be evaluated is a list the first
element (the car) in the list is evaluated and then applied to
the arguments.
The car of the expression is reevalutated until either
a proper functional form is recognized or
if it's evaluated to an illegal functional form.
.PP
If the functional form is an unbound atom,
.I lips
looks for the property 
.B autoload 
on the property list
of the atom.
If it is found, and the value is a symbol or a string,
the file with that name is loaded (if possible).
The interpreter then checks if the 
atom is no longer unbound, in wich case
evaluation continues.
If the atom doesn't have the
.B autoload
property,
or loading the file didn't define the symbol,
.I lips
looks under the property
.BR alias .
The atom is replaced with the expression stored under that property,
if any, and the rest of the expression is appended at the end
and the evaluation process continues.
When all else fails
it is assumed the atom stands for an executable command.
The return value of an executable command is,
at present, always 
.BR t .
.PP
Note that the arguments for the command are never evaluated.
If you want them evaluated you must use the function
.BR apply .
.SH VARIABLES
What follows is a list of all user accessable variables
that in some way guides the behavior of
.IR lips .
.IP histmax
controls the number of commands to save on
the history list.
.IP gcgag
If this variable is 
.B nil
a message is printed every time
.I lips
starts and ends a garbage collection.
.IP verboseflg
if verboseflg is non-nil,
.I lips
prints some messages whenever a function is redefined or
a variable is reset to a new value.
.IP path
path contains a list of directories to be searched after
executable commands.
.IP home
home contains the home directory of the user.
.IP history
in the history variable the history list is built.
This is for internal use and proper functioning of
.I lips
is not garantueed if history is set to funny values.
.IP histnum
histnum contains the number on the current
.I lips
interaction.
The same warnings apply to histnum as to history.
.IP prompt
This variable contains the string that is printed
as the prompt.
An exclamation mark is replaced with the current history number.
The default prompt is "!_".
.IP brkprompt
same as prompt but controls prompting in a break.
The default is "!:".
.IP promptform
this variable is evaluated before the prompt is printed.
If an error occurs during evaluation of promptform it
is reset to the default prompt.
.SH PROPERTIES
This section describes some properties that are used internally.
.IP alias
this is used during alias expansion.
Let's say we want to define an alias for ls that uses the
-F option of ls: (putprop 'l 'alias '(ls -F)).
To simplify defining aliases the lisp function alias is provided
(see below).
.IP autoload
if during evaluation of a form, an undefined function is
found the offending atom may have a file stored under
this property. If this is indeed the case the file is loaded and
evaluation is allowed to continue.
If the function is still undefined error processing takes over.
.SH FUNCTIONS
The following is a complete list of all available functions
in the system.
'\"
.SS Arithmetic functions
'\"
.I Lips
supports both integer and floating point arithmetics.
Functions for integers starts with an i, and functions
for floating points starts with an f.
Functions that have no prefix
are generic versions of the functions and take
both kinds of numbers.
If any of the arguments is a float,
the result is also a float.
.TP 15
(+ x1 x2 ...) (i+ x1 x2 ...) (f+ x1 x2 ...)
adds any number of arguments.
.TP
(- x y) (i- x y) (f- x y)
subtracts y from x.
.TP
(* x1 x2 ...) (i* x1 x2 ...) (f* x1 x2 ...)
multiplies any number of arguments.
.TP
(/ x y) (i/ x y) (f/ x y)
divides x with y.
.TP
(i% x y)
divides x with y and returns
the remainder.
.TP
(itof x)
converts integer x to its floating point equivalent.
.TP
(minus x) (iminus x)
negates x.
.TP
(abs x)
absolute value of x.
.TP
(add1 x)
adds one to x.
.TP
(sub1 x)
subtracts one from x.
.TP
(greaterp x y)
returns 
.B t 
if x > y, otherwise 
.BR nil .
.TP
(lessp x y)
returns 
.B t 
if x < y, otherwise 
.BR nil .
.TP
(zerop x)
returns 
.B t 
if x = 0, otherwise 
.BR nil .
Also returns 
.B nil
if x is not a number.
.TP
(eqp x y)
returns 
.B t 
if x = y where x and y are numbers,
otherwise 
.BR nil .
.TP
(neqp x y)
same as (not (eqp x y)).
.TP
(minusp x)
return 
.B t 
if x < 0, otherwise 
.BR nil .
.TP
(geq x y)
.B t 
if x is greater or equal to y, 
.B nil
otherwise.
.TP
(leq x y)
.B t 
if x is less or equal to y.
'\"
.SS Primitive functions
'\"
.TP 15
(atom x)
returns 
.B t 
if x is atomic.
.TP
(car x)
returns the head of the list x. car of 
.B nil
is 
.BR nil .
.TP
(cdr x)
returns tail of x. cdr of 
.B nil
is 
.BR nil .
.TP
(c...r x)
any permutation of d and a, up to three
in length. (cadr x) = (car (cdr x)).
.TP
(cons x y)
makes a new cons cell with car set to x and cdr set to y.
.TP
(set x y)
sets x to the value of y. Both x and y are evaluated.
.TP
(setq x y)
same as set but x is not evaluated.
.TP
(setqq x y)
same as set but neither x nor y is evaluated.
.TP
(progn e1 e2 ...)
the forms e1, e2,... are evaluated one by one and the
value of the last e\fIn\fR i returned.
.TP
(prog1 e1 e2 ...)
same as progn but e1 is returned as value.
.TP
(prog2 e1 e2 ...)
same as progn but e2 is returned as value.
.TP
(quote x)
quotes x, don't evaluate x.
'\"
.SS Control functions
'\"
.TP 15
(cond (p1 e1) (p2 e2) ...)
the predicates p\fIn\fR are evaluated and whenever any of them
is evaluated to 
.BR t , 
e\fIn\fR
is evaluated and returned as value of the cond.
If no predicate evaluates to 
.BR t , 
.B nil
is returned.
.TP
(while p e ...)
as long as p evaluates to 
.B t , 
e is evaluated.
while always returns 
.BR nil .
.TP
(if p e1 e2 ...)
If the expression p is evaluated to non-nil,
evaluates expression e1.
Otherwise evaluate e2 to e\fIn\fR and return the
value of e\fIn\fR as in progn.
'\"
.SS Predicates
'\"
.TP 15
(listp x)
returns 
.B t 
if x is a list or 
.BR nil .
.TP
(nlistp x)
returns 
.B t 
if x is not a list or 
.BR nil .
Same as (not (listp x)).
.TP
(litatom x)
.B t 
if x is a literal atom, i.e. a symbol.
.TP
(equal x y)
returns 
.B t 
if x and y are structurally equal.
The difference between equal and eq is that eq just
compares pointers but equal also compares list structures.
Two lists are generally not eq.
.TP
(null x)
.B t 
if x is 
.BR nil ,
.B nil
otherwise.
.TP
(eq x y)
.B t 
if x and y points to the same objects.
Literal atoms that print the same are defined
to be eq, but strings, floats, and lists generally
are not.
Integers however are eq because they are stored directly
in the pointer field.
.TP
(neq x y)
same as (not (eq x y)).
.TP
(numberp x)
return x if x is a number, 
.B nil
otherwise.
.TP
(memb x l)
return a list that is a tail of l with
its car eq to x.
If there is no x on the top level of l,
.B nil
is returned.
.TP
(boundp x)
returns 
.B t 
if x is an unbound atom.
.TP
(typeof x)
this isn't really a predicate,
instead it returns the type of x as an atom.
The types are: 
.BR nil , 
symbol, integer, float, indirect, cons,
string, subr, fsubr, lambda, nlambda, closure, unbound,
environ, 
.BR t , 
free, eof, file and error.
'\"
.SS Logical Functions
'\"
.TP 15
(and x1 x2 ...)
returns 
.B t 
if all arguments evaluates to 
.BR t ,
otherwise and returns 
.B nil 
as soon as any argument evaluates
to 
.BR nil .
.TP
(or x1 x2 ...)
returns 
.B t 
as soon as any argument is evaluated to 
.BR t ,
otherwise 
.BR nil .
.TP
(not x)
returns 
.B t 
if x is 
.BR nil , 
and 
.B nil 
if x is non-nil.
'\"
.SS Functions operating on lists
'\"
.TP 15
(list x1 x2 ...)
creates a list with x1, x2,... as elements.
.TP
(append x1 x2 ...)
appends the lists together, i.e. x2 is appended
to x1, x3 to x2 etc. All arguments must be lists.
Any argument that is 
.B nil 
is ignored. All lists
are copied. This means that (append x) just makes a
copy of x.
.TP
(length x)
returns the number of elements in the list x.
.TP
(nconc x1 x2 ...)
same as append but don't copy,
and uses rplacd to destructively change the lists.
.TP
(tconc l o)
the car of l is a list and the cdr of l is a pointer to
the first element of the list.
The object o is added to the end of the list
and the cdr is updated.
An empty l should be (\fBnil\fP) but if l is 
.B nil
it is
initialized to ((o) o).
All pointers to l points to the new list since
the changes are destructive.
.TP
(nth x y)
returns the x'th element of y, (nth 2 y) = (cadr y).
'\"
.SS Destructive Functions
'\"
.TP 15
(rplaca x y)
replaces car of x with y destructively.
.TP
(rplacd x y)
replaces cdr of x with y destructively.
.TP
(attach x y)
attaches the object to the list y in the same way as cons,
but y is not changed.
Thus pointers to y point to the changed list.
'\"
.SS String functions
'\"
.TP 15
(stringp x)
.B t 
if x is a string.
.TP
(streq x y)
.B t 
if the strings x and y are equal.
.TP
(concat x1 x2 ...)
concatenates the strings into a new string.
The argument strings are copied.
.TP
(strlen x)
returns the number of characters in x.
.TP
(substr s n m)
extracts a substring from s beginning in
position n thru position m.
.TP
(symstr x)
returns the print name of the literal atom x
as a string.
.TP
(strcomp s1 s2)
compares the strings s1 and s2 and returns an integer
in the same way the C function strcmp() does.
'\"
.SS Eval and Friends
'\"
.TP 15
(eval e)
evaluates e.
.TP
(apply f l)
applies the function f on the list of arguments in l.
.TP
(apply* f x1 x2 ...)
applies f on x\fBn\fR.
Same as (apply f (list x1 x2 ...)).
.TP
(closure f v)
eval function that forms the closure of function f,
with variables listed in v statically bound.
This is close to function in other lisp
dialects. Any closure that is created within
another closure and lists a variable contained
in that closure refers to the same variable.
This makes it possible for two closures to
share one or more variables.
.TP
(lambda x . y)
creates a lambda object.
x is the list of arguments,
y is a list of forms.
The argument list may be
a list, 
.BR nil ,
a literal atom (symbol),
or a list ending with a dotted pair.
.B nil
means no argument,
an atom means the actual arguments
are bound as a list to the atom (nospread),
the list ending with a dotted pair means
that the first arguments are bound the formal
parameters with excess arguments bound to the
dotted atom (half-spread).
.TP
(nlambda x . y)
creates an nlambda object, i.e. a noeval
version of a lambda object.
Otherwise the same as lambda.
'\"
.SS Map Functions
'\"
.TP 15
(map l f1 f2)
applies function f1 on l and sets l to
(f2 l) until l is 
.BR nil .
If f2 is left out or 
.BR nil , 
cdr is used.
The return value is always 
.BR nil .
.TP
(mapc l f1 f2)
same as map but f1 is applied to the car of l.
The return value is always 
.BR nil .
.TP
(maplist l f1 f2)
same as map, but a list of the reults of applying
f1 is made and returned.
.TP
(mapcar l f1 f2)
same as mapc but a list of the results is returned.
'\"
.SS Input/Output Functions
'\"
In all output and input functions the file parameter
f may have some default values.
If f is left out or is 
.BR nil , 
x is printed on stdout
or read from stdin.
If f is 
.B t 
then x is printed on stderr.
f may not be 
.B t 
in an input function.
.TP 15
(print x f)
prints the expression x on file f.
x is printed so it may be read later with read.
Breaks and separators in atoms are therefor printed preceeded by
a backslash.
Output is terminated with a newline.
.TP
(prin1 x f)
prints x on file f but without backslashes
and with no terminating newline.
Expressions printed with prin1 cannot generally be read
with (read).
.TP
(prin2 x f)
prints x in the same way as print but with no terminating newline.
.TP
(ratom f)
reads an atom from file f.
Break characters like `(' and `)' are treated as atoms.
.TP
(read f)
Reads a
.I lips
expression from file f.
.TP
(readline f)
reads a line from file f the same way the
.I lips
toploop does.
readline adds an extra pair of parenthesis to the expression
before it's returned.
.TP
(readc f)
reads a single character from file f.
Line buffering is still in effect.
.TP
(spaces n f)
prints n spaces to file f.
.TP
(terpri f)
prints a newline to file f.
.TP
(printlevel n)
sets the maximum level lists are printed.
Expressions more more deeply nested than n are
replaced with an ampersand, `&', on output.
printlevel returns the previous setting.
.TP
(load file)
opens file, a string or a symbol,
and reads lisp expressions from it until an
end of file is reached.
.TP
(cpprint s f)
looks up the C source for the primitive function s
and prints it on file f.
'\"
.SS Functions Dealing with Properties
'\"
.TP 15
(putprop a p v)
puts the value v on a's property p.
.TP
(getprop a p)
gets the value of property p stored on a's property list.
.TP
(remprop a p)
removes the property p from a.
.TP
(getplist a)
returns the internal representation of a's
property list.
.TP
(setplist a b)
sets the property list of a to b.
putprop, getprop and remprop depends on using the correct
representation.
Avoiding these function inorder to use a different
representation doesn't garantuee
.I lips
works properly since properties
are used internally.
'\"
.SS Miscellaneous Functions
'\"
.TP 15
(error x y)
the string x is prin2'ed followed by a space
and the expression y printed.
.TP
(freecount)
returns the number of currently free cons cells.
.TP
(obarray)
contructs a list of all symbols in 
.IR lips .
 The list
is not in alphabetic order.
.TP
(topofstack)
returns the environment frame on the top of environment stack.
.TP
(envget e n)
retrieves the \fBn\fRth entry in environment frame e.
.TP
(reclaim n)
performs garbage collection.
If n is non-nil n additional pages are allocated.
.TP
(baktrace)
prints an extensive back trace of the control stack.
.TP
(expand w r)
expand the string or symbol w with waildcards
to a list of symbols.
If r is non-nil no error is reported and 
.B nil
is returned if no file matched w.
.TP
(??)
prints the history list,
last command first.
'\"
.SS Shell Specific Functions
'\"
All functions that in some way redirects its
input or output are executed in a fork.
This means that redirecting i/o of a lisp
function doesn't make permanent changes to the
.I lips
environment.
No global variables are changed.
.PP
No arguments in this section evaluate their argument.
.TP 15
(redo x)
redoes a command specified by x.
x is an integer denoting a history event.
If x is 
.B nil
 it is equivalent with the current value of
histnum.
.TP
(pipe-cmd . x)
.I lips
forks once for every expression in x and connects
the forks with pipes.
.TP
(redir-to c f)
evaluates c redirecting stdout to the file f.
f is specified with a string or a symbol.
.TP
(redir-from c f)
evaluates c taking input from the file f specified
as a string or a symbol.
.TP
(append-to c f)
same as redir-to but stdout is appended to the specified file.
.TP
(back c)
evaluates c in the background without waiting for it to
finish.
.TP
(rehash)
updates the internal hash table used to discard functions
not possible to execute.
.TP
(setenv var val)
sets the environment variable var to the value val.
Var and val are strings or symbols.
.TP
(getenv var)
returns the value of environment variable var as a string.
Var is either a string or a symbol.
.TP
(cd dir r)
changes the current working directory to dir.
If dir is 
.BR nil ,
change it to home directory.
If r is non-nil cd doesn't print an error message
if dir doesn't exist, it returns 
.B nil
instead.
Cd updates the environment variable PWD to contain
the current working directory.
.TP
(exec c)
replaces the current 
.I lips
process with c.
'\"
.SS Job Control
'\"
.TP 15
(jobs)
prints a list of all current jobs and their status.
.TP
(fg n)
brings the job with number n to the foreground.
If n is 
.BR nil ,
the most current job is started.
.TP
(bg n)
same as fg but put the job in the background.
'\"
.SS Unix Related Functions
'\"
.TP 15
(errno)
returns the latest unix error.
.TP
(access name m)
returns t if file called name has the mode m given as an integer.
.TP
(alarm s)
starts the alarm timer to go off in s seconds.
.TP
(chdir d)
changes current working directory to d.
.TP
(chmode n m)
changes mode for n to m given as an integer.
.TP
(close f)
closes file f.
.TP
(creat n m)
creates the file n with mode m.
.TP
(dup f)
duplicates file f.
.TP
(exit s)
exits 
.I lips
with exit status s.
.TP
(getuid)
returns user id.
.TP
(geteuid)
returns get effective user id.
.TP
(getgid)
returns group id.
.TP
(getegid)
returns effective group id.
.TP
(getpid)
returns the process id of the current 
.I lips 
process.
.TP
(killproc p s)
sends signal s to process p.
.TP
(link o n)
links old file to new file or directory n.
.TP
(setnice i)
increments current nice value with i.
.TP
(open n m)
opens file with name n according to mode m.
m is one of the atoms read, write or append.
.TP
(setuid i)
sets user id to i.
.TP
(setgid g)
sets user group id to g.
.TP
(signal s f)
installs a signal handler f for signal s.
The function f is called when 
.I lips 
receives the signal s.
.TP
(unlink n)
unlinks the file n (no questions asked).
'\"
.SS Functions Manipulating Function Definitions
'\"
.TP 15
(de name pars . body)
define the lambda function name with parameters pars and the rest
of the arguments as the body.
.TP
(df name pars . body)
same as de but for nlambda functions.
.TP
(define name lam)
defines name as the function lam.
Basically the same as set but prints the message (foo redefined)
when name differs from the definition stored already.
In addition the old definition is stored under the property olddef.
.TP
(getrep f)
gets the representation of the lambda/nlambda function f as a list.
'\"
.SS Lisp Functions
'\"
For a more complete description of these functions,
see
.I "Lips Reference Manual"
\&.
.TP
(pp . funs)
prettyprints the functions listed in funs.
Returns the list of funs.
.TP
(pprint exp)
prettyprints the expression exp.
Returns 
.BR nil .
.TP
(edit fun)
simple lisp structure editor.
.TP
(alias n a)
defines an alias a for atom n.
If a is left out, the current alias for n is printed.
If both n and a is left out, all currently defined
aliases are printed.
.TP
(pushd d)
pushes d on a directory stack and cd's to it.
If d is a number the directory in the position n
in the directory stack is swapped with the top.
If d is 
.B nil
it is the same as (pushd 1).
The top of stack has element number 0.
.TP
(popd)
pops the directory stack and cd's to the new top of stack.
.TP
(dirs)
prints the current directory stack.
.SH FILE
.PD 0
.TP 20
.I lipsrc
global init file read during startup.
.TP
.I \u\(ap\d/.lipsrc
personal init file read after global init file.
.PD
.SH "SEE ALSO"
sh(1), csh(1)
.LP
.I "Lips Reference Manual"
.SH BUGS
Input/output handling is not consistent.
The only way to redirect stderr is to use the internal
functions, there is no read macro that handles this.
.LP
It is not possible to define user read macros.
.LP
Interrupting
.I lips
during critical moments may put it in an undefined state.
.LP
File name globbing doesn't recognize ranges in []'s.
.LP
Breaking is not handled gracefully if a function breaks
inside a pipe.
.LP
.I "Lips Reference Manual"
is nonexisting.
.SH AUTHOR
Krister Joas (krijo@ida.liu.se).
