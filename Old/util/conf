#!/bin/sh
# conf -- configures lips
# @(#)conf 90/02/03
#
# Copyright 1990, 2020 Krister Joas
#
# No options makes a pessimistic makefile that works
# with most versions of make.
#
# -ovl =	overlays (it's too big for PDP)
# -gnu =	create makefile for gnu make (GNUmakefile)
# -gcc =	use gcc as the compiler
# -new =	create makefile for enhanced make (e.g. SunOS 4.0)
# VAR=val	defines var as val (used to define e.g. DESTDIR)
# filename	names a configuration file
#		Options available in the configuration file:
#		  OPTION TERMCAP
#		  OPTION SELECT
#		  OPTION JOB_CONTROL
#		  OPTION SHELL
#		  OPTION LIPSDIR "path to lips source"
#		  MAKEVERSION NEWMAKE|GNUMAKE|
#		  MAKEFILE makefile name
#		  COMPILER name of c compiler
#		  OVERLAYS
#		The keyword OPTIONS choses various options for lips
#		while the other keywords choses makefile options.
#
# If the configuration file name is given a file called conf.h will
# be created in the current directory.  A new makefile (default name
# is Makefile) is always created, renaming existing makefile.
#

template=makefile.x
destdir=/usr/local/bin

MAKEFILE=Makefile
COMPILER=
MAKEVERSION=
OVERLAYS=
DEFINE=

# Process command line
while [ $# -gt 0 ]
do
  case $1 in
    -ovl)
      OVERLAYS=yes ;;
    -gnu)
      MAKEFILE=GNUmakefile
      MAKEVERSION=GNUMAKE ;;
    -gcc)
      COMPILER=GCC ;;
    -new)
      MAKEVERSION=NEWMAKE ;;
    *=*)
      DEFINE="${DEFINE:-} $i" ;;
    -*)
      echo "usage: $0 [-ovl] [-gnu] [-gcc] [-new] [VAR=val] [filename]" 1>&2
      exit 1 ;;
    *)
      echo $0: Configuring lips
      if [ -f conf.h ]
      then
        echo $0: Moving conf.h to conf.h.old
        mv conf.h conf.h.old
      fi
      while read command argument value dummy
      do
        case "X${command}X" in
          XOPTIONX)
            case $argument in
              SELECT|TERMCAP|JOB_CONTROL|SHELL)
                echo "#define $argument" >> conf.h ;;
              LIPSDIR)
                echo '#define LIPSDIR' $value >> conf.h ;;
            esac ;;
          XDESTDIRX)
            DEFINE="${DEFINE:-} $argument" ;;
          XMAKEFILEX)
            MAKEFILE=$argument ;;
          XCOMPILERX)
            COMPILER=$argument ;;
          XMAKEVERSIONX)
            MAKEVERSION=$argument ;;
          XOVERLAYSX)
            OVERLAYS=yes ;;
          X\#*X|XX)
            ;;
          *)
            echo "$0: no such option \"$command\"" 1>&2 ;;
        esac
      done < $1
  esac
  shift
done

cpp=/lib/cpp

# Save old version of the makefile, if there is one.
if [ -f $MAKEFILE ]
then
  echo $0: Old $MAKEFILE moved to ${MAKEFILE}.old
  mv $MAKEFILE ${MAKEFILE}.old
fi

cat > $MAKEFILE <<EOF
# This file is automatically maintained.
# Make permanent changes to ${template}.

EOF

date +"# This makefile was generated on %T %h %m 19%y" >> $MAKEFILE

# Process the VAR=val stuff from the command line.
dest=false
for i in $DEFINE
do
  var=`expr $i : '\(.*\)=.*'`
  if [ $var = "DESTDIR" ]
  then
    dest=true
  fi
  val=`expr $i : '.*=\(.*\)'`
  echo "#define $var $val" >> mkmake.$$
done

# If not defined elsewhere, DESTDIR is defined
# as the value of destdir.
$dest || echo "#define DESTDIR $destdir" >> mkmake.$$

# Put the defines that chooses the makefile options.
if [ ! -z "$MAKEVERSION" ]
then
  echo "#define $MAKEVERSION" >> mkmake.$$
fi

if [ ! -z "$COMPILER" ]
then
  echo "#define $COMPILER" >> mkmake.$$
fi

if [ ! -z "$OVERLAYS" ]
then
  echo "#define OVL" >> mkmake.$$
fi

# Add the makefile template file.
cat $template >> mkmake.$$

# Find dependencies.
if [ ! -f depend ]
then
  echo $0: Finding dependencies
  for i in *.c
  do
    cc -E $i |
      sed -n 's/^# [0-9]* ".\/\(.*\)" [0-9]*$/\1/p' |
      sort |
      uniq > depend.$$
    echo `basename $i .c`.o: $i `cat depend.$$` >> depend
  done
  /bin/rm -f depend.$$
fi

# Pass it through cpp.
echo $0: Creating $MAKEFILE
$cpp -undef -P mkmake.$$ | cat -s >> $MAKEFILE

/bin/rm mkmake.$$

# Done.
